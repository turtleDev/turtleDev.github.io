<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on turtleDev</title>
    <link>https://turtledev.in/posts/</link>
    <description>Recent content in Posts on turtleDev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 09 Jun 2019 02:04:38 +0530</lastBuildDate>
    
	<atom:link href="https://turtledev.in/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang Concurrency Patterns: Double Checked Locking</title>
      <link>https://turtledev.in/posts/go-concurrency-patterns-double-checked-locking/</link>
      <pubDate>Sun, 09 Jun 2019 02:04:38 +0530</pubDate>
      
      <guid>https://turtledev.in/posts/go-concurrency-patterns-double-checked-locking/</guid>
      <description>Golang is quite pecuiliar in the way that it approaches Object Oriented Programming. Almost all of us are familiar with some OO language that either has classes or plain objects with a delegation mechanism (I&amp;rsquo;m looking at you, JavaScript)
And yet it&amp;rsquo;s exhilarating to write OO style code in Golang. I never realised I could do so much (if not everything) without classes and generics. My code ends up being a lot more robust and malleable.</description>
    </item>
    
  </channel>
</rss>